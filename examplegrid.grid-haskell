Grid {message = "This is a computer generated file.  Do not edit.", gridName = "gridhaskell", gridLicence = "{-GPLv3-}", gridImports = ["Control.Concurrent","System"], gridPureFunctions = [("","")], gridComments = [((-1,1),"This is a comment.")], gridCells = Start {point = (-1,0), prototype = "", code = "main", arguments = [], next = Action {point = (0,0), code = "getChar", return = False, push = True, pull = False, path = Nothing, next = Action {point = (0,1), code = "'n'", return = True, push = True, pull = False, path = Just (SteppingStone {point = (1,1), next = PathDestination {point = (3,1)}}), next = Action {point = (0,2), code = "(==)", return = True, push = True, pull = True, path = Nothing, next = Switch {point = (0,3), patterns = [Pattern {patternPoint = (2,5), pattern = "True", action = Destination {point = (2,6), origin = (0,1), path = Nothing, next = Action {point = (2,7), code = "putChar", return = False, push = False, pull = True, path = Nothing, next = Exit {point = (2,8), signal = "ExitSuccess"}}}},Pattern {patternPoint = (-2,5), pattern = "False", action = NewEmptyMVar {point = (-2,6), labelPoint = (-1,6), mvar = "char", next = Fork {point = (-2,7), newThreads = [Action {point = (-4,9), code = "getChar", return = False, push = True, pull = False, path = Nothing, next = PutMVar {point = (-4,10), labelPoint = (-3,10), mvar = "char", next = End {point = (-4,11)}}},TakeMVar {point = (0,9), labelPoint = (-1,9), mvar = "char", next = Jump {point = (0,10), path = Just (SteppingStone {point = (2,10), next = PathDestination {point = (0,1)}})}}]}}}]}}}}}}