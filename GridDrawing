module 
buildTable :: ScrolledWindow -> Grid -> IO (Table, [VBox])
buildTable scrwin mygrid = do
     (_,(_,name),(_,licence),(_, imports),(_, pure_functions),(_, comments),(_, firstgridcell))<- return mygrid

     grid_maximum_x <- return (maximum_x firstgridcell comments)
     grid_maximum_y <- return (maximum_y firstgridcell comments)
     grid_minimum_x <- return (minimum_x firstgridcell comments)
     grid_minimum_y <- return (minimum_y firstgridcell comments)
     
     table <- tableNew (lengthBetween grid_minimum_y grid_maximum_y) (lengthBetween grid_minimum_x grid_maximum_x) True     
     scrolledWindowAddWithViewport scrwin table
     
     cellFormList <- sequence (map cellForm (displayCellList firstgridcell comments (grid_minimum_x,grid_minimum_y) (grid_maximum_x, grid_maximum_y)))
          
     let places = map (\(x,y) -> (x-grid_minimum_x,y-grid_minimum_y)) (map swap (cross [grid_minimum_y..grid_maximum_y] [grid_minimum_x..grid_maximum_x]))
     sequence_ (zipWith (attachCellForm table) cellFormList places)
     return (table, cellFormList)
    
cellForm :: DisplayCell -> IO VBox
cellForm (DisplayCellCode cell) = do
        info <- labelNew (Just ((show (cellPoint cell)) ++"  Code"))
        contents <- entryNew
        entrySetText contents (cellText cell)
        box <- vBoxNew False 0
        boxPackStart box info PackNatural 0
        boxPackStart box contents PackNatural 0
        return box
cellForm (DisplayCellComment (point,text)) = do
        info <- labelNew (Just ((show point)++" Comment"))
        contents <- entryNew
        entrySetText contents text
        box <- vBoxNew False 0
        boxPackStart box info PackNatural 0
        boxPackStart box contents PackNatural 0
        return box
cellForm (DisplayCellBlank point) = do
        info <- labelNew (Just ((show point)++" Blank"))
        contents <- entryNew
        box <- vBoxNew False 0
        boxPackStart box info PackNatural 0
        boxPackStart box contents PackNatural 0
        return box
        
cross :: [Int] -> [Int] -> [(Int,Int)]
cross row col = do 
        x <- row
        y <- col
        return (x,y)

attachCellForm :: Table -> VBox -> (Int,Int) -> IO ()
attachCellForm table form (x,y) = 
              tableAttachDefaults table form x (x+1) y (y+1)
